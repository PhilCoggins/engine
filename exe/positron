#! /usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path("../lib", File.dirname(__FILE__)))

require 'optparse'
require 'positron'

options = {assets: []}

OptionParser.new do |opts|

  options[:help] = ARGV.shift if ARGV.first == 'help'
  if ARGV.empty?
    options[:help] = 'help' # show help as default subcommand
  elsif !ARGV.first.match(/^-/)
    options[:command] = ARGV.shift
  end

  opts.banner = Positron::Help.banner(options[:command])

  if %w(init npm).include?(options[:command])
    options[:cli_path] = ARGV.shift || Dir.pwd
  end

  if %w(build watch).include?(options[:command])

    opts.on("-j", "--js", "#{options[:command]} Javascript only") do |val|
      options[:assets].push 'js'
      options[:only] = true
    end

    opts.on("-s", "--sass", "#{options[:command]} Sass stylesheets only") do |val|
      options[:assets].push 'sass'
      options[:only] = true
    end

    opts.on("-S", "--svg", "#{options[:command]} SVG only") do |val|
      options[:assets].push 'svg'
      options[:only] = true
    end

    opts.on("-o", "--output PATH", String, "Where should JS/CSS/HTML files be written, (default: current directory)") do |path|
      options[:output_path] = path
    end
  end

  opts.on("-c", "--config PATH", String, "Path to a config file (default: positron.yml, config/positron.yml)") do |path|
    options[:config_file] = path
  end

  opts.on("-v", "--version", "Print version") do |version|
    options[:version] = true
  end

  opts.on("-h", "--help", "Print this message") do |version|
    options[:help] = opts
    options[:command] = 'help'
  end

  if options[:help] == 'help'
    options[:help] = opts
  end
end.parse!

if !options[:only]
  options[:assets] = %w(svg js sass)
end

if options[:version]
  puts "Positron version #{Positron::VERSION}"
elsif options[:help]

  if options[:help]
    puts "Positron version #{Positron::VERSION}\n\n"
    puts options[:help]

    # Use this if commands get long
    #IO.popen("less", "w") do |f| 
      #f.puts "Positron version #{Positron::VERSION}"
      #f.puts options[:help]
    #end
  end
else
  Positron::run(options)
end
