#! /usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path("../lib", File.dirname(__FILE__)))

require 'optparse'
require 'cyborg'

options = {assets: []}

def next_arg
  if ARGV.first && !ARGV.first.match(/^-/)
    ARGV.shift
  end
end

OptionParser.new do |opts|

  options[:help] = ARGV.shift if %w(help h).include?(ARGV.first)

  if ARGV.empty?
    options[:help] = 'help' # show help as default subcommand
  else
    options[:command] = next_arg
  end

  opts.banner = Cyborg::Help.banner(options[:command])

  if %w(n new).include? options[:command]
    options[:name] = next_arg

    opts.on("-f", "--force", "Overwrite existing files") do |val|
      options[:force] = true
    end
  end

  if %w(s server).include? options[:command]
    opts.on("-w", "--watch", "Watch assets") do |val|
      options[:watch] = true
    end
  end

  if %w(b w s build watch server).include? options[:command]
    opts.on("-j", "--js", "Build javascripts.") do |val|
      options[:select_assets] = true
      options[:js] = true
    end
    opts.on("-c", "--css", "Build css.") do |val|
      options[:select_assets] = true
      options[:css] = true
    end
    opts.on("-s", "--svg", "Build svgs.") do |val|
      options[:select_assets] = true
      options[:svg] = true
    end
    opts.on("-m", "--maps", "Enable sourcemaps for javascript and stylesheets.") do |val|
      options[:maps] = true
    end
    opts.on("-p", "--production", "Build assets as with production mode.") do |val|
      options[:production] = true
    end
  end

  opts.on("-v", "--version", "Print version") do |version|
    options[:version] = true
  end

  opts.on("-h", "--help", "Print this message") do |version|
    options[:help] = opts
    options[:command] = 'help'
  end

  if options[:help] == 'help'
    options[:help] = opts
  end
end.parse!

if options[:version]
  puts "Cyborg version #{Cyborg::VERSION}"
elsif options[:help]

  if options[:help]
    puts "Cyborg version #{Cyborg::VERSION}\n\n"
    puts options[:help]

    # Use this if commands get long
    #IO.popen("less", "w") do |f| 
      #f.puts "Cyborg version #{Cyborg::VERSION}"
      #f.puts options[:help]
    #end
  end
else
  Cyborg::Command.run(options)
end
